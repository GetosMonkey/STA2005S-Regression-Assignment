---
title: "Stats Assignment 1"
author: "Group 48 - ABRMAR043"
format: html
editor: visual
---

# STA2005S Regression Assignment

Setup, Data loading and Objective:

```{r, echo=TRUE, eval=TRUE, include=FALSE}
# We want to analyse the relationships between the variables: (outside_temperature, humidity, wind_speed, household_size, appliance_index, energy_efficiency, solar_installed, day_of_week, and holiday) against consumption_kwh to inform demand-side management and efficiency policy

#| results: hide
#| warning: false
#| message: false
#| error: false
if (!requireNamespace("remotes", quietly = TRUE)) {
install.packages("remotes")
}
remotes::install_github("MiguelRodo/DataTidyRodoSTA2005S")
data("data_tidy_energy_use", package = "DataTidyRodoSTA2005S")

```

```{r}
#| results: hide
#| warning: false
#| echo: false

library(ggplot2)
library(dplyr)
library(tidyr)
library(car)
library(MASS)
library(reshape2)
library(reactable)
library(shiny)
library(knitr)

data <- data_tidy_energy_use

consumption_kwh <- data$consumption_kwh
outside_temperature <- data$outside_temperature
humidity <- data$humidity
wind_speed <- data$wind_speed
household_size <- data$household_size
appliance_index <- data$appliance_index

energy_efficiency <- factor(data$energy_efficiency, levels = c("Poor", "Average", "Good", "Excellent"), ordered = TRUE)

solar_installed <- factor(data$solar_installed, levels = c("Yes", "No"), ordered = TRUE)

day_of_week <- factor(data$day_of_week, 
levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"), ordered = TRUE)

holiday <- data$holiday

# Making a color Palette for my document: 
col_palette = c (
  "#ff6fae",
  "#d81159",
  "#f94144", 
  "#f3722c", 
  "#f8961e", 
  "#f9c74f",
  "#90be6d", 
  "#43aa8b",
  "#4d908e",
  "#277da1",
  "#3a86ff",
  "#7766EB",
  "#9d4edd",
  "#991090", 
  "#c93399"
  
)

```

------------------------------------------------------------------------

## Part One: Analysis

### Section 1: Introduction

#### Problem & Unknown:

```{r}

```

#### Analysis Summary:

```{r}

```

#### Nature of analysis:

```{r}

```

### Section 2: Data Exploration

#### Density Plots:

```{r}
# Plot a histogram of consumption_kwh (freq = FALSE, if using base R) with an overlaid normal density 

mean_kwh <- mean(consumption_kwh, na.rm = TRUE)
sd_kwh <- sd(consumption_kwh, na.rm = TRUE)

hist(consumption_kwh, 
     freq = FALSE, 
     main = "Histogram of Electricity Consumption", 
     xlab = "Consumption (kwh)",
     ylab = "Density",
     col = col_palette[7], 
     border = "white"
     )

curve(dnorm(x, mean = mean_kwh, sd = sd_kwh), 
      col = col_palette[11], 
      lwd = 2.5, 
      add = TRUE
      )

```

```{r}
#| warning: false
# Plot the density of consumption_kwh, stratified by solar_installed, with overlaid normal densities. Comment on the shape, and consider why the densities changes from the unstratified case.

solar_yes <- data %>% filter(solar_installed == "Yes")
solar_no <- data %>% filter(solar_installed == "No")

mean_solar <- mean(solar_yes$consumption_kwh, na.rm = TRUE)
mean_no_solar <- mean(solar_no$consumption_kwh, na.rm = TRUE)
sd_solar <- sd(solar_yes$consumption_kwh, na.rm = TRUE)
sd_no_solar <- sd(solar_no$consumption_kwh, na.rm = TRUE)

ggplot(data, aes(x = consumption_kwh, fill = solar_installed)) +
  geom_density(color = "white", linewidth = 0, alpha = 0.4) +

  stat_function(fun = dnorm, 
                args = list(mean = mean_solar, sd = sd_solar),
                aes(linetype = "Normal (Solar)"),
                color = col_palette[4], linewidth = 1.15) +
  stat_function(fun = dnorm, 
                args = list(mean = mean_no_solar, sd = sd_no_solar),
                aes(linetype = "Normal (No solar)"),
                color = col_palette[12], linewidth = 1.15) +
  
  scale_fill_manual(values= c("Yes"=col_palette[1], "No"=col_palette[11])) +
  scale_linetype_manual(values = c(2, 2), name = "Normal Distribution") +
  
  labs(title = "Density Plot of Electricity Consumption Density by Solar Installation", 
       x = "Consumption (kWh)", 
       y = "Density",
       fill = "Solar Installed"
       ) +
  theme_minimal()
  
```

#### Pairwise Plots:

```{r}
#| fig-width: 22
#| fig-height: 18
#| out-width: "100%"
#| layout-ncol: 1
#| dpi: 150

# Create pairwise scatterplots for all continuous variables, including consumption_kwh

cts_variables <- data %>%
  dplyr::select(consumption_kwh, outside_temperature, humidity, 
                wind_speed, household_size, appliance_index)

day_numeric <- as.numeric(factor(data$day_of_week, 
levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"), ordered = TRUE))

efficiency_numeric <- as.numeric(factor(data$energy_efficiency, levels = c("Poor", "Average", "Good", "Excellent"), ordered = TRUE))

solar_numeric <- as.numeric(factor(data$solar_installed, levels = c("Yes", "No"), ordered = TRUE))
#_________________________________________________________________

# Graph
pairs(x = cts_variables, pch = 19, 
      col = col_palette[efficiency_numeric + 1], 
      main = " Pairwise Scatterplot for Continous Variables", 
      gap = 0.5,
      las = 1, 
      cex = 3, 
      cex.labels = 3, 
      cex.axis = 3,
      cex.main = 3
      )
```

#### Categorical Variable Plots:

```{r}
#| fig-align: "center"
#| echo: FALSE

# Plot consumption_kwh against each categorical variable. Namely: Solar_installed, Energy_efficient, days_of_the_week, and holiday

par(mar = c(4, 10, 3, 2))
boxplot(consumption_kwh ~ efficiency_numeric, data = data,
        horizontal = TRUE, 
        names = levels(energy_efficiency),
        xlab = "Energy Consumption (kWh)", ylab = "", 
        main = "Boxplot of Energy Consumption \nby Efficiency",
        col = col_palette[1:4], 
        las = 1
        )
mtext("Efficiency", side = 2, line = 6, cex = 1, font = 1)

par(mar = c(4, 10, 3, 2))
boxplot(consumption_kwh ~ solar_numeric, data = data, 
        horizontal = TRUE,
        names = levels(solar_installed),
        xlab = "Energy Consumption (kWh)", ylab = "Solar Installed", 
        main = "Boxplot of Energy Consumption \nby Solar Use",
        col = col_palette[5:6], 
        las = 1
        )

par(mar = c(4, 10, 3, 2))
boxplot(consumption_kwh ~ day_numeric, data = data, 
        horizontal = TRUE,
        names = levels(day_of_week),
        xlab = "Energy Consumption (kWh)", ylab = "", 
        main = "Boxplot of Energy Consumption \nby Weekday",
        col = col_palette[7:13], 
        las = 1
        )
mtext("Weekday", side = 2, line = 6, cex = 1, font = 1)

par(mar = c(4, 10, 3, 2))
boxplot(consumption_kwh ~ holiday, data = data, 
        horizontal = TRUE,
        names = c("No", "Yes"),
        xlab = "Energy Consumption (kWh)", ylab = "Holiday", 
        main = "Boxplot of Energy Consumption \nby Holiday Status",
        col = col_palette[14:15], 
        las = 1
        )

```

#### Categorical Relationships:

###### Energy Efficiency vs Solar Usage Table:

```{r}
#| echo: false

my_theme <- reactableTheme(
            highlightColor = col_palette[1],
            headerStyle = list(
              background = col_palette[11],
              color = "white",
              fontSize = "14px",
              fontWeight = "bold",
              borderBottom = paste0("2px solid ",col_palette[4])
            )
            )
  
# Efficiency vs Solar Usage

efficiency_solar <- as.data.frame.matrix(table(energy_efficiency, solar_installed))

reactable(efficiency_solar, 
          columns = list( .rownames = colDef(name = "Energy Efficiency"), No = colDef(name = "No Solar"), Yes = colDef(name = "Solar use")),
          sortable = FALSE,
          highlight = TRUE, 
          borderless = TRUE, 
          bordered = TRUE,
          theme = my_theme
          )

```

<br>

###### Weekdays vs Holidays Table:

```{r}
#| echo: false
  
# Weekdays vs Holidays

days_holidays <- as.data.frame.matrix(table(day_of_week, holiday))

reactable(days_holidays, 
          columns = list( 
            .rownames = colDef(name = "Day of the Week"), 
            "0" = colDef(name = "No Holiday"), 
            "1" = colDef(name = "Holiday")),
          sortable = FALSE,
          highlight = TRUE, 
          borderless = TRUE, 
          bordered = TRUE,
          theme = my_theme
          )

```

#### Comments:

### Section 3: Simple Linear Regression

#### Model Fitting:

```{r}
# From first principles (manual calculation), fit a simple linear regression of consumption_kwh on outside_temperature

#1) design matrix

X <- cbind(1, outside_temperature)
Y <- consumption_kwh
k <- ncol(X)
n <- nrow(X)
p <- k-1

#2) finding regression coefficients

B_hat <- solve(t(X)%*%X)%*%t(X)%*%Y
B0_hat <- B_hat[1]
B1_hat <- B_hat[2]

#3) calculating residuals and variance

Y_hat <- X %*% B_hat
e <- Y - Y_hat
SSE <- t(e) %*% e
SST <- sum((Y-mean(Y))^2)
s_squared <- as.numeric(SSE/(n-k))

#4) calculating Standard Errors

cov_mat_B <- s_squared * solve(t(X)%*%X)
se_B <- sqrt(diag(cov_mat_B))
se_B0 <- se_B[1]
se_B1 <- se_B[2]

#5) t,f & p - values

t_B0 <- B0_hat/se_B0
t_B1 <- B1_hat/se_B1
p_B0 <- 2 * pt(abs(t_B0), df = n - k, lower.tail = FALSE)
p_B1 <- 2 * pt(abs(t_B1), df = n - k, lower.tail = FALSE)
F_stat <- ((SST-SSE)/(k-1)) / s_squared
p_F <- pf(F_stat, df1 = k - 1, df2 = n - k, lower.tail = FALSE)

#5) multiple R squared and R-adjusted

R_squared <- 1 - (SSE/SST)
R_adj <- 1-(1-R_squared)*((n-1)/(n-k))

```

------------------------------------------------------------------------

```{r}
#| echo: FALSE

# Reproduce the summary() output, working from the coefficients table down

stars = character(2)
for (i in 1:2){
  p_value = c(p_B0, p_B1)[i]
  if (i<0.001){ stars[i] = "***" } 
  else if (i < 0.01){ stars[p_value] = '**' }
  else if (i < 0.05){ stars[p_value] = '*' }
  else if (i < 0.1) { stars[p_value] = "."}
}
  
coeff_table <- data.frame(
                estimates = c(B0_hat, B1_hat),
                std_errors = c(se_B0, se_B1),
                t_values = c(t_B0, t_B1),
                p_values =c(p_B0, p_B1),
                signif = stars
                  )
rownames(coeff_table) <- c("(Intercept)", "X1")

cat("\nCoefficients:")

print(coeff_table)

cat("\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n")
cat("Residual standard error: ", round(sqrt(s_squared), 2), "on", n-p, "degrees of freedom.\n")
cat("Multiple R-squared: ",round(R_squared, 4), "\tAdjusted R-squared: ",round(R_adj, 4), "\n" )
cat("F-statistic: ", round(F_stat, 2), "on", k-1, "and", n-k, "DF, p-value: ", round(p_F, 4), "\n")
```

------------------------------------------------------------------------

#### Simultaneous Hypothesis Test:

```{r}
# From first principles, perform a simultaneous hypothesis test for the effect of energy_efficiency on consumption_kwh.

#1) design matrix and variables

Average <- as.numeric(energy_efficiency == "Average")
Good <- as.numeric(energy_efficiency == "Good")
Excellent <- as.numeric(energy_efficiency == "Excellent")

X_eff <- cbind(1, Average, Good, Excellent)
colnames(X_eff) <- c("Intercept", "$\\beta_{Average}$", "$\\beta_{Good}$", "$\\beta_{Excellent}$")
#Y is the same
n_eff <- nrow(X_eff)
k_eff <- ncol(X_eff)

#2) finding regression coefficients

B_hat_eff <- solve(t(X_eff)%*%X_eff)%*%t(X_eff)%*%Y

#3) calculating residuals and variance

Y_hat_eff <- X_eff %*% B_hat_eff
e_eff <- Y - Y_hat_eff
SSE_eff <- t(e_eff) %*% e_eff
SST_eff <- sum((Y-mean(Y))^2)
s_squared_eff <- as.numeric(SSE_eff/(n-k))
vcov_B_eff <- s_squared_eff * solve(t(X_eff)%*%X_eff)
names(B_hat_eff) <- colnames(X_eff)

#4) L matrix for Hypothesis test: H0 = B_average = B_good = B_excellent

L <- matrix(c(0, 1, 0, 0, 
              0, 0, 1, 0, 
              0, 0, 0, 1), 
            nrow = 3, byrow = TRUE)
colnames(L) <- names(B_hat_eff)

#5) contrasts

contrast <- L %*% B_hat_eff
vcov_contrast <- L %*% vcov_B_eff %*% t(L)

#5) F statistic and p-value

F_stat_eff <- t(contrast) %*% solve(vcov_contrast) %*% contrast / nrow(L)
F_stat_eff <- as.numeric(F_stat_eff)

p_value_F <- pf(F_stat_eff, df1 = nrow(L), df2 = n_eff - k_eff, lower.tail = FALSE)
                                                         
```

------------------------------------------------------------------------

```{r, results = "asis"}
#| echo: FALSE
# Output

cat("Null Hypothesis: ")
cat("$$H_{0}: \\beta_{Poor} = \\beta_{Average} = \\beta_{Good} = \\beta_{Excellent} = 0$$\n\n")

cat("Alternative Hypothesis: ")
cat("$$H_{1}: \\text{At least one of } (\\beta_{Poor}, \\beta_{Average}, \\beta_{Good}, \\beta_{Excellent}) \\neq 0$$\n")

cat("Test-statistic: ")
cat("$$F_{stat} = ", round(F_stat_eff, 3), "$$\n")

cat("p-value: ")
cat("$$p_{value} = ", round(p_value_F, 4), " > 0.05 $$\n")

cat("Conclusion: ")
cat("$$\\text{At the } \\alpha = 0.05 \\text{ significance level, we fail to reject } H_{0}.$$")
cat("$$\\text{Because there is no significant overall effect of energy efficiency} $$")
cat("$$\\text{on energy consumption } (p_{value} > 0.05).$$\n")

```

------------------------------------------------------------------------

### Section 4: Multiple Linear Regression

#### Fit Model:

```{r}
# Fit a multiple linear regression including all explanatory variables. Include an interaction term between outside_temperature and humidity.

fit <- lm(consumption_kwh ~ 
            outside_temperature + 
            humidity + wind_speed + 
            household_size + 
            appliance_index + 
            energy_efficiency + 
            solar_installed + 
            day_of_week + holiday +
            outside_temperature:humidity, 
            data = data)

# Construct and display a table of coefficients with 95% confidence intervals and p-values.

confint_fit <- confint(fit, level = 0.95)

fit_summary <- summary(fit)
table_coefficients <- fit_summary$coefficients

table_final <- cbind(table_coefficients[,
               c( "Pr(>|t|)")], confint_fit)
colnames(table_final) <- c( "p-value", "CI:97.5%", "CI:2.5%")

print(table_final, digits = 3)
```

#### Hypothesis Testing:

```{r}
#| results: hide

# Test whether the following significantly affect consumption_kwh

# Outside Temperature
fit_no_temp <- lm(consumption_kwh ~ 
                   humidity + 
                   wind_speed + 
                   household_size + 
                   appliance_index + 
                   energy_efficiency + 
                   solar_installed + 
                   day_of_week + holiday,
                   data = data)

anova_temp <- anova(fit_no_temp, fit)
print(anova_temp)
cat("\n\n")

# Humidity 

fit_no_humidity <- lm(consumption_kwh ~ 
            outside_temperature + 
            wind_speed + 
            household_size + 
            appliance_index + 
            energy_efficiency + 
            solar_installed + 
            day_of_week + holiday,
            data = data)

anova_humidity <- anova(fit_no_humidity, fit)
print(anova_humidity)
cat("\n\n")

# Solar Installed

fit_no_solar <- lm(consumption_kwh ~ 
            outside_temperature +
            energy_efficiency +
            humidity + 
            wind_speed + 
            household_size + 
            appliance_index +
            day_of_week + holiday,
            data = data)

anova_solar <- anova(fit_no_solar, fit)
print(anova_solar)
cat("\n\n")

```

------------------------------------------------------------------------

```{r, results= 'asis'}
#| echo: FALSE 

# Displaying results: Outside Temperature

cat("$$H_{0}: \\beta_{temperature} = \\beta_{temp:humidity} = 0$$\n\n")

cat("$$H_{1}: \\text{At least one of } (\\beta_{temperature}, \\beta_{temp:humidity}) \\neq 0$$\n")

cat("$$F_{stat} = ", round(anova_temp$F[2], 3), "$$\n")

cat("$$p_{value} = ", round(anova_temp$`Pr(>F)`[2], 4), " > 0.05 $$\n")

cat("$$\\text{At the } \\alpha = 0.05 \\text{ significance level, we fail to reject } H_{0}.$$")
cat("$$\\text{Because there is no significant overall effect of outside temperature} $$")
cat("$$\\text{on energy consumption } (p_{value} > 0.05).$$\n")

cat("------------------------------------------------------------------------————————————————\n")

# Displaying results: Humidity

cat("$$H_{0}: \\beta_{humidity} = \\beta_{temp:humidity} = 0$$\n\n")

cat("$$H_{1}: \\text{At least one of } (\\beta_{humidity}, \\beta_{temp:humidity}) \\neq 0$$\n")

cat("$$F_{stat} = ", round(anova_humidity$F[2], 3), "$$\n")

cat("$$p_{value} = ", round(anova_humidity$`Pr(>F)`[2], 4), " > 0.05 $$\n")

cat("$$\\text{At the } \\alpha = 0.05 \\text{ significance level, we fail to reject } H_{0}.$$")
cat("$$\\text{Because there is no significant overall effect of humidity} $$")
cat("$$\\text{on energy consumption } (p_{value} > 0.05).$$\n")

cat("------------------------------------------------------------------------————————————————\n")

# Displaying results: Solar Installed

cat("$$H_{0}: \\beta_{solar} = \\beta_{no solar} = 0$$\n\n")

cat("$$H_{1}: \\text{At least one of } (\\beta_{solar}, \\beta_{no solar}) \\neq 0$$\n")

cat("$$F_{stat} = ", round(anova_solar$F[2], 3), "$$\n")

cat("$$p_{value} = ", anova_solar$`Pr(>F)`[2], " < 0.05 $$\n")

cat("$$\\text{At the } \\alpha = 0.05 \\text{ significance level, we reject } H_{0} \\text{ in favor of } H_{1}.$$")
cat("$$\\text{Because there is a significant overall effect of solar usage} $$")
cat("$$\\text{on energy consumption } (p_{value} < 0.05).$$\n")


```

------------------------------------------------------------------------

#### Interpretation:

```{r}

```

### Section 5: Conclusion

#### Summary:

```{r}

```

#### Recommendations:

```{r}

```

#### Future Research:

```{r}

```

------------------------------------------------------------------------

## Part Two: Simulation of Power

```{r}
#| echo: FALSE

#setup

set.seed(25)
x_vec <- runif(25, 0, 1)
B0_sim <- 12
sigma_sq <- 6.25
sd_sim <- sqrt(sigma_sq)
n_sim <- 1000

```

### Scenario A: Baseline Normal Errors

```{r, results='asis'}

B1_sim_A <- c(0.5, 1, 2, 5, 10)

results_A <- data.frame(
              B1_A = B1_sim_A, 
              power = numeric(length(B1_sim_A))
              )

for ( i in seq_along(B1_sim_A)){
  
      B1_A <- B1_sim_A[i]
      rejections_A = 0
      
      for (sim in 1:n_sim){
        
        E_A <- rnorm(length(x_vec), mean = 0, sd = sd_sim)
        Y_A <- B0_sim + B1_A * x_vec + E_A
        
        fit_A <- lm(Y_A ~ x_vec)
        p_val_A <- summary(fit_A)$coefficients[2, 4]
        
        if (p_val_A < 0.05){ rejections_A = rejections_A +1 }
        
      }
      results_A$power[i] <- rejections_A/n_sim
      } 
```

```{r}
#| echo: false

#Tabulate results: 

kable(
  results_A, 
  col.names = c("$\\beta1_{A}$", "power")
  )

```

------------------------------------------------------------------------

### Scenario B: Non-linear Truth/Exponential Relationship

```{r}

```
